Slip 4
A) Create a Simple Android Application Which Send ―Hello‖ message from one activity to another with help of Button (Use Intent).
Activitymain.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context=".MainActivity">
<EditText
android:id="@+id/send_text_id"
android:layout_width="300dp"
android:layout_height="wrap_content"
android:textSize="25dp"
android:hint="Input"
android:textStyle="bold"
android:layout_marginTop="20dp"
android:layout_marginLeft="40dp"/>
<Button
android:id="@+id/send_button_id"
android:layout_width="wrap_content"
android:layout_height="40dp"
android:text="send"
android:textStyle="bold"
android:layout_marginTop="150dp"
android:layout_marginLeft="150dp"/>
</RelativeLayout>
Mainactivity.java
package com.example.myhello_intent;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
public class MainActivity extends AppCompatActivity {
Button send_button;
EditText send_text;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
send_button = (Button)findViewById(R.id.send_button_id);
send_text = (EditText)findViewById(R.id.send_text_id);
send_button.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v)
{
String str = send_text.getText().toString();
Intent intent = new Intent(getApplicationContext(), SecondActivity.class);
intent.putExtra("message_key", str);
startActivity(intent);
}
});
}
}
Activitysecond.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context=".SecondActivity">
<TextView
android:id="@+id/received_value_id"
android:layout_width="300dp"
android:layout_height="50dp"
android:textStyle="bold"
android:textSize="40dp"
android:layout_marginTop="20dp"
android:layout_marginLeft="40dp"/>
</RelativeLayout>
SecondActivity.java
package com.example.myhello_intent;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.os.Bundle;
import android.widget.TextView;
public class SecondActivity extends AppCompatActivity {
TextView receiver_msg;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second_activity);
receiver_msg = (TextView)findViewById(R.id.received_value_id);
Intent intent = getIntent();
String str = intent.getStringExtra("message_key");
receiver_msg.setText(str);
}
}



B)Write an IOS application to implement UI elements like TableView and selected item of the TableView is displayed in the second view.
SecondViewController.swift
import UIKit
class SecondViewController: UIViewController {
    @IBOutlet weak var label: UILabel!
    var selectedItem: String?
    override func viewDidLoad() {
        super.viewDidLoad()
        if let item = selectedItem {
            label.text = "You selected \(item)"
        } else {
            label.text = "No item selected"
        }
    }
}
TableViewController.swift
import UIKit
class TableViewController: UITableViewController {
    let items = ["Item 1", "Item 2", "Item 3"]
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
        cell.textLabel?.text = items[indexPath.row]
        return cell
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let indexPath = tableView.indexPathForSelectedRow,
            let destination = segue.destination as? SecondViewController {
            destination.selectedItem = items[indexPath.row]
        }
    }
}




























A)Write a C program to find file properties such as inode number, number of hard link, File permissions, File size, File access and modification time and so on of a given file using fstat() system call.
#include <stdio.h>
#include <sys/stat.h>
#include <time.h>
#include <fcntl.h>
#include <unistd.h>
int main(int argc, char *argv[]) {
    struct stat fileStat;
    int fd;
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    if ((fd = open(argv[1], O_RDONLY)) < 0) {
        printf("Error: could not open file.\n");
        return 1;
    }
    if (fstat(fd, &fileStat) < 0) {
        printf("Error: could not get file properties.\n");
        return 1;
    }
    close(fd);
    printf("File inode number: %ld\n", fileStat.st_ino);
    printf("Number of hard links: %ld\n", fileStat.st_nlink);
    printf("File permissions: %o\n", fileStat.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO));
    printf("File size: %ld bytes\n", fileStat.st_size);
    printf("File access time: %s", ctime(&fileStat.st_atime));
    printf("File modification time: %s", ctime(&fileStat.st_mtime));
    return 0;
}
B) Write a C program to implement the following unix/linux command (use fork, pipe and exec system call). Your program should block the signal Ctrl-C and Ctrl-\ signal during the execution.
ls –l | wc–l
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>
void signal_handler(int sig) {
    // Block signals Ctrl-C and Ctrl-\ during the execution
    printf("Signal %d received, blocking...\n", sig);
}
int main() {
    // Block signals Ctrl-C and Ctrl-\ during the execution
    signal(SIGINT, signal_handler);
    signal(SIGQUIT, signal_handler);
    int pipefd[2];
    pid_t pid_ls, pid_wc;
    // Create pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }
    // Fork and execute ls
    if ((pid_ls = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid_ls == 0) {
        // Child process (ls)
        close(pipefd[0]); // Close unused read end
        dup2(pipefd[1], STDOUT_FILENO); // Redirect stdout to pipe
        execlp("ls", "ls", "-l", NULL); // Execute ls
        perror("execlp");
        exit(EXIT_FAILURE);
    }
    // Fork and execute wc
    if ((pid_wc = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid_wc == 0) {
        // Child process (wc)
        close(pipefd[1]); // Close unused write end
        dup2(pipefd[0], STDIN_FILENO); // Redirect stdin to pipe
        execlp("wc", "wc", "-l", NULL); // Execute wc
        perror("execlp");
        exit(EXIT_FAILURE);
    }
    // Parent process
    close(pipefd[0]); // Close unused read end
    close(pipefd[1]); // Close unused write end
    // Wait for child processes to finish
    waitpid(pid_ls, NULL, 0);
    waitpid(pid_wc, NULL, 0);
    return 0;
}




